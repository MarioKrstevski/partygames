generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id                     String                   @id @default(cuid())
    email                  String                   @unique
    role                   UserRole                 @default(USER)
    username               String                   @unique
    hashedPassword         String
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    Session                Session[]
    charadeList            CharadeList[]
    fiveSecondsCategory    FiveSecondsCategory[]
    TruthOrDareCategory    TruthOrDareCategory[]
    MostLikelyToCategory   MostLikelyToCategory[]
    NeverHaveIEverCategory NeverHaveIEverCategory[]
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model CharadeList {
    id          String   @id @default(cuid())
    isPublic    Boolean  @default(false)
    name        String   @unique
    description String   @default("")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    content     String[]
}

model FiveSecondsCategory {
    id          String   @id @default(cuid())
    isPublic    Boolean  @default(false)
    description String   @default("")
    name        String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    content     String[]
}

model TruthOrDareCategory {
    id           String   @id @default(cuid())
    isPublic     Boolean  @default(false)
    description  String   @default("")
    name         String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
    userId       String
    truthContent String[]
    dareContent  String[]
}

model MostLikelyToCategory {
    id          String   @id @default(cuid())
    isPublic    Boolean  @default(false)
    description String   @default("")
    name        String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    content     String[]
}

model NeverHaveIEverCategory {
    id          String   @id @default(cuid())
    isPublic    Boolean  @default(false)
    description String   @default("")
    name        String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    content     String[]
}
